
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__promptadapter_h__adaptor__H__
#define __sdbuscpp__promptadapter_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace Secret {

class Prompt_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.Secret.Prompt";

protected:
    Prompt_adaptor(sdbus::IObject& object)
        : object_(object)
    {
        object_.registerMethod("Prompt").onInterface(INTERFACE_NAME).withInputParamNames("window-id").implementedAs([this](const std::string& window-id){ return this->Prompt(window-id); });
        object_.registerMethod("Dismiss").onInterface(INTERFACE_NAME).implementedAs([this](){ return this->Dismiss(); });
        object_.registerSignal("Completed").onInterface(INTERFACE_NAME).withParameters<bool, sdbus::Variant>("dismissed", "result");
    }

    ~Prompt_adaptor() = default;

public:
    void emitCompleted(const bool& dismissed, const sdbus::Variant& result)
    {
        object_.emitSignal("Completed").onInterface(INTERFACE_NAME).withArguments(dismissed, result);
    }

private:
    virtual void Prompt(const std::string& window-id) = 0;
    virtual void Dismiss() = 0;

private:
    sdbus::IObject& object_;
};

}}} // namespaces

#endif
