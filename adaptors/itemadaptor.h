
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__itemadapter_h__adaptor__H__
#define __sdbuscpp__itemadapter_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace Secret {

class Item_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.Secret.Item";

protected:
    Item_adaptor(sdbus::IObject& object)
        : object_(object)
    {
        object_.registerMethod("Delete").onInterface(INTERFACE_NAME).withOutputParamNames("Prompt").implementedAs([this](){ return this->Delete(); });
        object_.registerMethod("GetSecret").onInterface(INTERFACE_NAME).withInputParamNames("session").withOutputParamNames("secret").implementedAs([this](const sdbus::ObjectPath& session){ return this->GetSecret(session); });
        object_.registerMethod("SetSecret").onInterface(INTERFACE_NAME).withInputParamNames("secret").implementedAs([this](const sdbus::Struct<sdbus::ObjectPath, std::vector<uint8_t>, std::vector<uint8_t>, std::string>& secret){ return this->SetSecret(secret); });
        object_.registerProperty("Locked").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Locked(); });
        object_.registerProperty("Attributes").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Attributes(); }).withSetter([this](const std::map<std::string, std::string>& value){ this->Attributes(value); });
        object_.registerProperty("Label").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Label(); }).withSetter([this](const std::string& value){ this->Label(value); });
        object_.registerProperty("Type").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Type(); }).withSetter([this](const std::string& value){ this->Type(value); });
        object_.registerProperty("Created").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Created(); });
        object_.registerProperty("Modified").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Modified(); });
    }

    ~Item_adaptor() = default;

private:
    virtual sdbus::ObjectPath Delete() = 0;
    virtual sdbus::Struct<sdbus::ObjectPath, std::vector<uint8_t>, std::vector<uint8_t>, std::string> GetSecret(const sdbus::ObjectPath& session) = 0;
    virtual void SetSecret(const sdbus::Struct<sdbus::ObjectPath, std::vector<uint8_t>, std::vector<uint8_t>, std::string>& secret) = 0;

private:
    virtual bool Locked() = 0;
    virtual std::map<std::string, std::string> Attributes() = 0;
    virtual void Attributes(const std::map<std::string, std::string>& value) = 0;
    virtual std::string Label() = 0;
    virtual void Label(const std::string& value) = 0;
    virtual std::string Type() = 0;
    virtual void Type(const std::string& value) = 0;
    virtual uint64_t Created() = 0;
    virtual uint64_t Modified() = 0;

private:
    sdbus::IObject& object_;
};

}}} // namespaces

#endif
