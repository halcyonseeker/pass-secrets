
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__collectionadapter_h__adaptor__H__
#define __sdbuscpp__collectionadapter_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace Secret {

class Collection_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.Secret.Collection";

protected:
    Collection_adaptor(sdbus::IObject& object)
        : object_(object)
    {
        object_.registerMethod("Delete").onInterface(INTERFACE_NAME).withOutputParamNames("prompt").implementedAs([this](){ return this->Delete(); });
        object_.registerMethod("SearchItems").onInterface(INTERFACE_NAME).withInputParamNames("attributes").withOutputParamNames("results").implementedAs([this](const std::map<std::string, std::string>& attributes){ return this->SearchItems(attributes); });
        object_.registerMethod("CreateItem").onInterface(INTERFACE_NAME).withInputParamNames("properties", "secret", "replace").withOutputParamNames("item", "prompt").implementedAs([this](const std::map<std::string, sdbus::Variant>& properties, const sdbus::Struct<sdbus::ObjectPath, std::vector<uint8_t>, std::vector<uint8_t>, std::string>& secret, const bool& replace){ return this->CreateItem(properties, secret, replace); });
        object_.registerSignal("ItemCreated").onInterface(INTERFACE_NAME).withParameters<sdbus::ObjectPath>("item");
        object_.registerSignal("ItemDeleted").onInterface(INTERFACE_NAME).withParameters<sdbus::ObjectPath>("item");
        object_.registerSignal("ItemChanged").onInterface(INTERFACE_NAME).withParameters<sdbus::ObjectPath>("item");
        object_.registerProperty("Items").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Items(); });
        object_.registerProperty("Label").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Label(); }).withSetter([this](const std::string& value){ this->Label(value); });
        object_.registerProperty("Locked").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Locked(); });
        object_.registerProperty("Created").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Created(); });
        object_.registerProperty("Modified").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Modified(); });
    }

    ~Collection_adaptor() = default;

public:
    void emitItemCreated(const sdbus::ObjectPath& item)
    {
        object_.emitSignal("ItemCreated").onInterface(INTERFACE_NAME).withArguments(item);
    }

    void emitItemDeleted(const sdbus::ObjectPath& item)
    {
        object_.emitSignal("ItemDeleted").onInterface(INTERFACE_NAME).withArguments(item);
    }

    void emitItemChanged(const sdbus::ObjectPath& item)
    {
        object_.emitSignal("ItemChanged").onInterface(INTERFACE_NAME).withArguments(item);
    }

private:
    virtual sdbus::ObjectPath Delete() = 0;
    virtual std::vector<sdbus::ObjectPath> SearchItems(const std::map<std::string, std::string>& attributes) = 0;
    virtual std::tuple<sdbus::ObjectPath, sdbus::ObjectPath> CreateItem(const std::map<std::string, sdbus::Variant>& properties, const sdbus::Struct<sdbus::ObjectPath, std::vector<uint8_t>, std::vector<uint8_t>, std::string>& secret, const bool& replace) = 0;

private:
    virtual std::vector<sdbus::ObjectPath> Items() = 0;
    virtual std::string Label() = 0;
    virtual void Label(const std::string& value) = 0;
    virtual bool Locked() = 0;
    virtual uint64_t Created() = 0;
    virtual uint64_t Modified() = 0;

private:
    sdbus::IObject& object_;
};

}}} // namespaces

#endif
